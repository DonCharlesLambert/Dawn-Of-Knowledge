{"version":3,"sources":["img/Computer Science - An Overview.jpg","img/Introducing Logic.jpg","img/SuperIntelligence.jpg","img/Algorithms To Live By.jpg","img/Golden Ticket.jpg","img/Mind Design II.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","Intro","QuizList","props","style","height","window","innerHeight","img","Overview","title","description","Logic","SuperIntelligence","Algorithms","Ticket","Design","QuizItem","state","itemHeight","expand","setState","this","transition","onClick","display","src","alt","alignSelf","width","padding","positon","borderTop","opacity","justifyContent","React","Component","BookPopUp","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,4D,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,kSCoB3C,SAASC,IACP,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,WACA,yBAAKA,UAAU,aAAf,WAKN,SAASC,IACP,OACE,6BACE,wBAAID,UAAU,gBAAd,uBACA,uBAAGA,UAAU,oBAMnB,SAASE,EAASC,GAChB,OACE,yBAAKH,UAAU,YAAYI,MAAO,CAACC,OAAQ,IAAOC,OAAOC,cACvD,kBAAC,EAAD,CAAUC,IAAKC,IAAUC,MAAO,gCAAiCC,YAAa,mEAC9E,kBAAC,EAAD,CAAUH,IAAKI,IAAOF,MAAO,oBAAqBC,YAAa,gHAC/D,kBAAC,EAAD,CAAUH,IAAKK,IAAmBH,MAAO,oBAAqBC,YAAa,kFAC3E,kBAAC,EAAD,CAAUH,IAAKM,IAAYJ,MAAO,wBAAyBC,YAAa,+FACxE,kBAAC,EAAD,CAAUH,IAAKO,IAAQL,MAAO,gBAAiBC,YAAa,qGAC5D,kBAAC,EAAD,CAAUH,IAAKQ,IAAQN,MAAO,iBAAkBC,YAAa,kI,IAK7DM,E,4MACJC,MAAQ,CACNC,WAAY,IACZC,OAAQ,G,EAGVA,OAAS,WACuB,UAA1B,EAAKF,MAAMC,WACb,EAAKE,SAAS,CAACF,WAAY,QAASC,OAAQ,IAE5C,EAAKC,SAAS,CAACF,WAAY,QAASC,OAAQ,K,uDAK9C,OACE,yBAAKpB,UAAU,OAAOI,MAAO,CAACC,OAAQiB,KAAKJ,MAAMC,WAAYI,WAAY,MAAOC,QAASF,KAAKF,QAC5F,yBAAKhB,MAAO,CAACqB,QAAS,OAAQpB,OAAQ,UACpC,yBAAKqB,IAAKJ,KAAKnB,MAAMK,IAAKR,UAAU,WAAW2B,IAAKL,KAAKnB,MAAMO,QAC/D,yBAAKN,MAAO,CAACwB,UAAW,SAAUC,MAAO,OAAQC,QAAS,QACxD,wBAAI9B,UAAU,kBAAkBsB,KAAKnB,MAAMO,OAC3C,uBAAGV,UAAU,wBAAwBsB,KAAKnB,MAAMQ,eAGpD,yBAAKP,MAAO,CAAC2B,QAAS,WAAYC,UAAW,iBAAkBP,QAAS,OAAQQ,QAASX,KAAKJ,MAAME,OAAQG,WAAY,KAAMW,eAAgB,iBAC5I,yBAAKlC,UAAU,YAAf,eAGA,yBAAKA,UAAU,YAAf,c,GA5BamC,IAAMC,WAqC7B,SAASC,EAAUlC,GACjB,OACE,yBAAKH,UAAU,cACb,yBAAK0B,IAAKvB,EAAMK,IAAKmB,IAAKxB,EAAMO,QAChC,uBAAGV,UAAU,wBAAwBG,EAAMQ,cAKlC2B,MA1Ff,WACE,OACE,yBAAKtC,UAAU,MAAMI,MAAO,CAACC,OAAQC,OAAOC,cAC1C,kBAACR,EAAD,MACA,kBAACE,EAAD,MACA,kBAACC,EAAD,MACA,kBAACmC,EAAD,QCHcE,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54689711.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Computer Science - An Overview.0150a951.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Introducing Logic.eb3a10c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SuperIntelligence.838d005c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Algorithms To Live By.e396bbed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Golden Ticket.a92d8112.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mind Design II.f7078e52.jpg\";","import React from 'react';\nimport './style/App.css';\nimport Overview from './img/Computer Science - An Overview.jpg'\nimport Logic from './img/Introducing Logic.jpg'\nimport SuperIntelligence from './img/SuperIntelligence.jpg'\nimport Algorithms from './img/Algorithms To Live By.jpg'\nimport Ticket from './img/Golden Ticket.jpg'\nimport Design from './img/Mind Design II.jpg'\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{height: window.innerHeight}}>\n      <Menu/>\n      <Intro/>\n      <QuizList/>\n      <BookPopUp/>\n    </div>\n  );\n}\n\nfunction Menu(){\n  return(\n    <div className=\"Menu\">\n      <div className=\"menu-item\"> HOME </div>\n      <div className=\"menu-item\"> BOOKS </div>\n      <div className=\"menu-item\"> QUIZ </div>\n    </div>\n  )\n}\n\nfunction Intro(){\n  return(\n    <div>\n      <h1 className=\"main-heading\"> DAWN OF KNOWLEDGE </h1>\n      <p className=\"main-paragraph\">\n      </p>\n    </div>\n  )\n}\n\nfunction QuizList(props){\n  return(\n    <div className=\"quiz-list\" style={{height: 0.75 * window.innerHeight}}>\n      <QuizItem img={Overview} title={'Computer Science: An Overview'} description={'This book presents an introductory survey of computer science.'}/>\n      <QuizItem img={Logic} title={'Introducing Logic'} description={'Logic is the backbone of Western civilization, holding together its systems of philosophy, science and law.'}/>\n      <QuizItem img={SuperIntelligence} title={'Superintelligence'} description={'New superintelligence could replace humans as the dominant lifeform on Earth.'}/>\n      <QuizItem img={Algorithms} title={'Algorithms To Live By'} description={'A fascinating exploration of how computer algorithms can be applied to our everyday lives.'}/>\n      <QuizItem img={Ticket} title={'Golden Ticket'} description={'Provides a nontechnical introduction to P-NP, its rich history, and its algorithmic implications'}/>\n      <QuizItem img={Design} title={'Mind Design II'} description={'Mind design is the endeavor to understand mind (thinking, intellect) in terms of its design (how it is built, how it works).'}/>\n    </div>\n  )\n}\n\nclass QuizItem extends React.Component{\n  state = {\n    itemHeight: 100,\n    expand: 0,\n  }\n\n  expand = () => {\n    if (this.state.itemHeight === '200px'){\n      this.setState({itemHeight: '100px', expand: 0})\n    }else{\n      this.setState({itemHeight: '200px', expand: 1})\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"item\" style={{height: this.state.itemHeight, transition: '2s'}} onClick={this.expand}>\n        <div style={{display: 'flex', height: '100px'}}>\n          <img src={this.props.img} className='item-img' alt={this.props.title}/>\n          <div style={{alignSelf: 'center', width: '100%', padding: '5px'}}>\n            <h3 className='item-title m-0'>{this.props.title}</h3>\n            <p className='item-description m-0'>{this.props.description}</p>\n          </div>\n        </div>\n        <div style={{positon: 'absolute', borderTop: 'solid 2px gray', display: 'flex', opacity: this.state.expand, transition: '2s', justifyContent: 'space-around'}}>\n          <div className=\"btn-main\">\n            Description\n          </div>\n          <div className=\"btn-main\">\n            Quiz\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction BookPopUp(props){\n  return(\n    <div className='book-popup'>\n      <img src={props.img} alt={props.title}/>\n      <p className='item-description m-0'>{props.description}</p>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}